트리(Tree)와 우선순위 큐(Priority Queue)

고급 알고리즘 문제를 해결할때 우선순위 큐를 매우많이 활용하게 되고 특히 차단경로와 같은 알고리즘에서 사용되는 자료구조 중 하나로써 매우 활용 빈도가 높습니다.

트리 자료구조를 이용해서 우선순위 큐를 어떻게 구현할 수 있는지도 알아보겠습니다.

트리(Tree)란?
- 트리는 가계도와 같이 계층적인 구조를 표현할 때 사용할 수 있는 자료구조입니다.
- 나무(tree)의 형태를 뒤집어 놓은 것과 같이 생겼습니다.
이때 뿌리에 해당하는것을 흔히 root 노드라고 표현합니다. 각각의 노드는 여러개의 자식 노드를 가지는 것 또한 확인할 수 있습니다.

트리 용어 정리
루트 노드 (root node) - 부모가 없는 최상위 노드
단말 노드 (leaf node) - 자식이 없는 노드

- 트리(Tree)에서는 부모와 자식 관계가 성립합니다.
- 형제 관계 : 17을 가지는 노드와 48을 가지는 노드 사이의 관계

- 깊이(depth): 루트 노드에서의 길이(length)
- 이때, 길이란 출발 노드에서 목적지 노드까지 거쳐야 하는 간선의 수를 의미합니다.
- 트리의 높이(height)는 루트 노드에서 가장 깊은 노드까지의 길이를 의미합니다.

트리 중에서 가장 많이 접하게 되는 트리인 이진 트리(Binary Tree)에 대해서 알아보겠습니다.

이진 트리(Binary Tree)란?
- 기본 적인 트리는 여러개의 자식을 가질 수 있지만 이진 트리는 최대 2개의 자식을 가질 수 있는 트리를 의미합니다.(즉 부모는 2명의 자식만 가질 수 있습니다.)

우선순위 큐(Priority Queue)란? (앞서 설명한 트리 구조를 이용해 구현할 수 있는 자료구조 중 하나)
- 우선순위 큐는 우선순위에 따라서 데이터를 추출하는 자료구조입니다.
- 컴퓨터 운영체제, 온라인 게임 매칭 등에서 활용됩니다. (어떤 사람이 우선순위가 높은지, 어떤 작업이 우선순위가 높은지와 같은)
- 우선순위 큐는 일반적으로 힙(heap)을 이용해 구현합니다. (heap은 쉽게 설명하면 앞서 설명한 트리 구조를 이용해 구현할 수 있는 자료구조 중 하나)

스택 - 가장 나중에 삽입된 데이터가 먼저 추출됨
큐 - 가장 처음에 삽입된 데이터부터 먼저 추출됨
우선순위 큐 - 추출될 때 현재 남아있는 원소들 중에서 가장 우선순위가 높은 데이터부터 추출됨 (즉, 개발자가 명시한 우선순위부터 데이터 추출)

그렇다면 어떻게 구현할 수 있을까?
- 우선순위 큐는 다양한 방법으로 구현이 가능합니다.
- 데이터 개수가 N개일 때, 구현 방식에 따른 시간 복잡도는 다음과 같습니다.

리스트 자료형 - 우리가 만약에 단순히 리스트 자료형이나 배열 같은걸 이용해 우선순위 큐를 구현한다면 예를들어 JS에서 배열을 이용해 구현한다고하면 삽입할때는 push를 이용한다고 하더라도 원소를 꺼낼때는 어떤것이 우선순위가 높은지 확인해야하기 때문에 삭제 시간이 N만큼 소요될 수 있습니다.

힙 - 힙을 이용해 우선순위 큐를 구현한다고하면 삽입, 삭제 시간모두 로그N의 시간 복잡도를 보장받을 수 있습니다.
이것이 트리를 이용하는 이유라고 볼 수 있습니다.

일반적인 큐 VS 우선순위 큐
- 일반적인 형태의 큐는 선형적인 구조를 가집니다. (먼저 들어온 데이터가 먼저 나간다)
- 반면에 우선순위 큐는 이진 트리(Binary Tree)(최대 2개까지의 자식을 가짐, 비선형 구조) 구조를 사용하는 것이 일반적입니다.

이진 트리(Binary Tree) 종류
1. 포화 이진 트리(Full Binary Tree)
- 포화 이진 트리는 리프 노드를 제외한 모든 노드가 두 자식을 가지고 있는 트리입니다.

2. 완전 이진 트리(Complete Binary Tree)
- 완전 이진 트리는 모든 노드가 왼쪽 자식부터 차근차근 채워진 트리입니다. (단순하게 위치가 정해져 있다고 보면 됩니다.)
만들어 지는 과정

3. 높이 균형 트리(Height Balanced Tree)
- 왼쪽 자식 트리와 오른쪽 자신 트리의 높이가 1이상 차이가 나지 않는 트리입니다.
- 오른쪽 사진은 왼쪽에 편형된 트리라고 볼 수 있습니다.

힙(Heap)이란?
- 힙(heap)은 원소들 중에서 최댓값 혹은 최솟값을 빠르게 찾아내는 자료구조로서 이진트리(완전 이진트리)로 구성되어 있습니다.
- 최대 힙(max heap) : 값이 큰 원소부터 추출합니다.
- 최소 힙(min heap) : 값이 작은 원소부터 추출합니다.
- 힙은 원소의 삽입과 삭제를 위해 O(log N)의 수행 시간을 요구합니다. (완전 이진트리를 사용하기 때문임)
- 단순한 N개의 데이터를 힙에 넣었다가 모두 꺼내는 작업은 정렬과 동일합니다.
- 이 경우 시간 복잡도는 O(Nlog N) 입니다. (최소 힙을 사용한다고 치면 N개를 모두 힙에 넣는 과정에서 Nlog N이 됩니다.)

최대 힙(Max Heap)
- 최대 힙은 부모 노드가 자식 노드보다 값이 큰 완전 이진 트리를 의미합니다.
- 따라서 최대 힙의 루트 노드는 전체 트리에서 가장 큰 값을 가진다는 특징이 있습니다.
- 최대 힙에서는 루트 노드를 꺼내면 최대 값

힙(Heap)의 특징
- 힙은 완전 이진 트리 자료구조를 따릅니다.
- 힙에서는 우선순위가 높은 노드가 루트(root)에 위치합니다.
- 직관적으로, 거슬러 갈 때마다 처리해야 하는 범위에 포함된 원소의 개수가 절반씩 줄어듭니다.
- 따라서 삽입과 삭제의 시간 복잡도는 O(log N)입니다.

1. 최대 힙(max heap)
- 부모 노드의 키 값이 자식 노드의 키 값보다 항상 크다
- 루트 노드가 가장 크며, 값이 큰 데이터가 우선순위를 가집니다.

2. 최소 힙(min heap)
- 부모 노드의 키 값이 자식 노드의 키 값보다 항상 작습니다.
- 루트 노드가 가장 작으며, 값이 작은 데이터가 우선순위를 가집니다.

최소 힙 구성 함수: Heapify
- (상향식 접근 방식) 자식에서부터 부모로 거슬러 올라가며, 부모보다 자신이 더 작은 경우에 위치를 교체합니다.
- 힙을 만든다는 의미에서 heapify라고 함수명을 흔히 붙이고는 합니다.

힙에 새로운 원소가 삽입될 때
- (상향식 접근 방법) 부모로 거슬러 올라가며, 부모보다 자신이 더 작은 경우에 위치를 교체합니다.
- 새로운 원소가 삽입되었을 때 O(log N)의 시간 복잡도를 유지하면서 힙 성질을 유지하도록 할 수 있습니다.

힙에 새로운 원소가 삭제될 때
- 원소가 제거되었을 때 O(log N)의 시간 복잡도로 힙 성질을 유지하도록 할 수 있습니다.
- 원소를 제거할때는 가장 마지막 노드가 루트 노드의 위치에 오도록 바꿔줍니다 이후에 루트 노드에서부터 하양식 접근 방법으로 (더 작은 자식 노드로) heapify()를 진행하면서 최대한 더 작은 노드 쪽으로 위치를 바꿔줍니다.

자바스크립트의 힙(Heap) 라이브러리
- 자바스크립트는 기본적으로 우선순위 큐를 라이브러리로 제공하지 않습니다.
- 최단 경로 알고리즘 등에서 힙(heap)이 필요한 경우 별도의 라이브러리를 사용해야 합니다.