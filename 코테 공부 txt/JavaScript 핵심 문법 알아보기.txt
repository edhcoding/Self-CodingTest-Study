알고리즘 코딩 테스트 문제의 입출력 형식
알고리즘 문제에서는 적절한(약속된) 입출력 양식이 주어집니다.
1. 첫 번째 단계는 데이터를 입력 받거나 생성하는 것입니다.
2. 이후에 적절한 알고리즘을 사용하여 도출된 정답을 정확한 형식으로 축력합니다.

문제에는 항상 입력, 출력 형식이 명확하게 주어져 있습니다.
- 예시) N명의 학생의 성적 데이터가 주어졌을 때, 이를 내림차순 정렬한 결과를 출력하여라.
- 입력 형식: 첫째 줄에는 학생의 수 N이 자연수로 주어지고, 둘째 줄에 공백을 기준으로 하여 
N명의 학생에 대한 성적이 정수 형태로 주어진다. (2S N S 1,000, 0 ≤ 성적 ≤ 100)
- 입력 예시:
5
17 88 53 100 73
- 출력 형식: N명의 학생의 성적을 내림차순 정렬한 결과를 첫째 줄에 공백을 기준으로 구분하여 출력하여라.
- 출력 예시:
100 88 73 53 17

코딩 테스트용 JavaScript 기본 출력
- 일반적인 알고리즘 문제를 풀 때, 표준 출력으로 console.log() 함수를 사용합니다.
// 단순히 문자열을 출력합니다.
console.log("Hello World");

result = 35;
// 템플릿 리터럴을 사용해 문자열 내부에 변수를 포함합니다.(백틱 문자 사용)
console.log(`정답은 ${result}입니다.`);

코딩 테스트용 JavaScript 기본 사칙 연산
- JavaScript 프로그래밍 언어에서는 기본적인 사칙 연산 기능을 제공합니다.
a = 7;
b = 3;

console.log(a + b);
console.log(a - b);
console.log(a * b);
console.log(parseInt(a / b)); // 몫만 남기기
- 나누기 연산 같은 경우에는 실수형태(소수점)로 처릴 될 수 있기 때문에 몫만 남기고 싶다면 parseInt() 함수와 같이 사용할 수 있습니다.
console.log(a % b);

코딩 테스트용 JavaScript 빠른 출력
- JavaScript로 코딩 테스트 문제를 풀 때, 출력 과정만으로 시간 초과를 받을 때가 있습니다.
- 출력 시간을 단축하기 위해 다음과 같은 방법을 유용하게 사용할 수 있습니다.
let answer = '';

/*
여러 출력 결과를 한 줄에 하나씩 출력할 때 매번 console.log()를 실행하지 않고,
하나의 문자열에 결과를 저장해서 한꺼번에 출력하는 것이 대개 더 빠르게 수행됩니다.
*/

for (let i = 1; i <= 100; i++) {
    answer += i + '\n'; // 문자열로 변환하여 기록 - 줄바꿈 기호를 넣게되면 한 줄씩 출력됩니다.
}

console.log(answer);

코딩 테스트용 JavaScript 기본 입력 - fs 모듈
- 입력 데이터가 텍스트 파일 형태로 주어지는 경우, 파일 시스템 모듈을 사용합니다.
- 예를 들어 /dev/stdin 파일에 적힌 텍스트를 읽어오는 경우, 다음과 같이 코드를 작성합니다.
- 기능: 전체 텍스트를 읽어 온 뒤에, 줄바꿈 기호를 기준으로 구분하여 리스트로 변환합니다.

// readline 모듈보다는 fs를 이용해 파일 전체를 읽어 들여 처리하기
let fs = require('fs');
// /dev/stdin 파일에 적힌 텍스트를 읽어온뒤 문자열 형태로 변환하고 split() 함수를 이용해서 줄바꿈 기호를 기준으로 입력 데이터를 구분해서 입력 받습니다.
let input = fs.readFileSync('/dev/stdin').toString().split('\n');

console.log(input);

코딩 테스트용 JavaScript 기본 입력 - readline 모듈
- 문제 풀 때 간혹 특정 시스템이나 특정 문제에 제한적으로 파일 시스템을 사용하지 못하도록 하는 경우가 있습니다 - 채점 사이트의 보안적인 이유 등이 있음
- 그렇기 때문에 일반적으로 fs 모듈을 사용하지 못한다면 readline 모듈을 사용해야 합니다.
- 한 줄씩 입력을 받아서, 처리하여 정답을 출력할 때는 realine 모듈을 사용할 수 있습니다.
- 표준 입력을 받고 표준 출력을 해주는 방식으로 생각 => 표준 입력은 키보드 입력해서 한 줄 한 줄 엔터를 쳐서 입력하는 방식, 표준 출력 컴퓨터 화면에 출력되는 것이라고 이해
const rl = require('readline').createInterface({
  input: process.stdin, 
  output: process.stdout
});

let input = [];
rl.on("line", function (line) {
  // 콘솔 입력 창에서 줄바꿈(Enter)를 입력할 때마다 호출
  input.push(line);
}).on("close", function () {
  // 콘솔 입력 창에서 Ctrl + C 혹은 Ctrl + D를 입력하면 호출(입력의 종료)
  console.log(input);
  process.exit();
});

JavaScript 문법 - Number 와 String 형태 변환
- 수(number) 데이터와 문자열(string) 데이터 간의 상호 변환이 필요합니다.
Int => String: 문자열로 변환
let a = "777";
let b = Number(a);
console.log(b); // 777

String => Int: 수로 변환
let a = 777;
let b = String(a);
console.log(b); // "777"

JavaScript 문법 - Array.prototype.reduce() => 원소에서 가장 큰 값 or 작은 값 찾기 or 모든 원소의 합 구하기 문제에서 사용
- 배열의 모든 원소에 대해 특정한 연산을 순차적으로 적용할 때 reduce()를 사용합니다.
/*
reduce() 메서드는 배열의 각 요소에 대해 reducer 함수를 실행한 뒤에 하나의 결과를 반환합니다.
reducer의 형태: (accumulator, currentValue) => (반환값)
- 배열의 각 원소를 하나씩 확인하며, 각 원소는 currentValue에 해당합니다.
- 반환값은 그 이후의 원소에 대하여 accumulator에 저장됩니다.

let data = [5, 2, 9, 8, 4];

// minValue 구하기 예제
let minValue = data.reduce((a, b) => Math.min(a, b));
console.log(minValue); // 2

// 모든 원소의 합 구하기 예제
let sumValue = data.reduce((a, b) => a + b, 0);
console.log(sumValue); // 28
*/

JavaScript 문법 - 배열 초기화 방법
- 알고리즘 문제를 풀 때 자주 사용되는 배열 초기화 방식은 다음과 같습니다.
// 직접 값을 설정하여 초기화
let arr = [8, 1, 4, 5, 7];

// 길이가 5이고 모든 원소의 값이 0인 배열 초기화
let arr = new Array(5).fill(0);

JavaScript 문법 - 집합 자료형
- 특정한 원소의 등장 여부를 파악할 때 집합 자료형을 효과적으로 사용할 수 있습니다.
let mySet = new Set(); // 집합 객체 생성

// 여러 개의 원소 삽입
mySet.add(3);
mySet.add(5);
mySet.add(7);
mySet.add(3); // 집합 객체의 특징: 중복된 원소는 추가되지 않습니다.

console.log(`원소의 개수: ${mySet.size}`); // 원소의 개수: 3
console.log(`원소 7을 포함하고 있는가? ${mySet.has(7)}`); // 원소 7을 포함하고 있는가? true

// 원소 5 제거
mySet.delete(5);
console.log(mySet); // Set { 3, 7 }

// 원소 전체 삭제
mySet.clear();
console.log(mySet); // Set {}

// 원소를 하나씩 출력
for (let item of mySet) console.log(item); // 3 7

JavaScript 문법 - 소수점 아래 특정 자리에서 반올림
- 실수를 출력할 때 소수점 아래 특정 자리에서 반올림할 수 있습ㄴ디ㅏ.
// 특정 실수에 대하여 toFixed()를 이용해 소수점 아래 둘재 자리까지 출력
let x = 123.456;
console.log(x.toFixed(2)); // "123.46"

// 소수점 아래 둘째 자리까지 출력하되, 반올림하지 않고 버림
console.log(Math.floor(x * 100) / 100); // 123.45

JavaScript 문법 - 이스케이프 시퀀스(Escape Sequence)
- 예약 문자 혹은 특수 문자를 출력하기 위하여 이스케이프 시퀀스를 사용할 수 있습니다.
console.log("그는 \"비범함\"을 보였다."); // 그는 "비범함"을 보였다.