JavaScript 탐욕법(greedy) 알고리즘 이해하기!

- 현재 상황에서 당장 가장 좋아 보이는 상황만을 선택하는 알고리즘입니다.
- 흔히 그리디 알고리즘 or 탐욕법이라고 불립니다.
- 최적의 해를 구하기 위한 근사적인 방법으로 사용될 때가 많습니다

탐욕 알고리즘 예시
아래 그래프는 트리 구조를 따르는 그래프 예시가 있습니다.
루트 노드에서 단말 노드까지 타고 내려가고 있습니다. 이때 거쳐가는 노드의 합이 가장 큰 경우를 고려하려면 어떻게 해야 할까요?
1 -> 4 -> 5 를 거쳐가면 10이 나와 최적의 해는 10입니다.

하지만 실제로 우리가 그래프를 탐색하는 과정에서 최적의 해를 구하기 위해서는 그래프 탐색 알고리즘을 이용해서 모든 경우를 전부 탐색하는 완전 탐색과 같은 방법으로 구현할 수 있습니다.

우리가 단순히 이 트리를 인간의 눈으로 보았을 때는 거시적으로 한눈에 들어오기 때문에 10이라는 걸 알 수 있지만 코드의 입자으로 봤을때는 단순히 1에서 출발했을때 인접한 노드 2, 4, 5중에 제일 큰 5로 바로 이동해야겠다고 생각할 수 있습니다.

매 상황에서 가장 큰 노드를 선택하는 경우 즉 현재 예시에서 1 -> 5 -> 2로 가는것이 탐욕 알고리즘의 결과라고 볼 수 있습니다.
이럴 경우 최적의 해를 보장받지는 못하지만 모든 경우를 다 검색해도 되지 않기 때문에 완전 탐색과 비교했을때 시간 복잡도 상으로 효율적인 경우가 많습니다.
하지만 최적의 해와는 거리가 있는 근사해를 구할 수 있겠죠 즉, 최적의 해와 가깝지 않을까? 라는 기대를 할 수 있습니다.

탐욕 알고리즘과 근사 해
- 현실 세계의 많은 상황에서는, 단순한 탐욕 알고리즘으로는 최적의 해를 놓칠 수 있습니다.
- 하지만, 최적의 해에 가까운 답을 뱉는 것을 고려하면 현실에서의 다양한 프로그램에서 "근사 해"를 구하는 목적으로 사용되곤 합니다.

그렇다면 코딩 테스트에서의 탐욕 알고리즘은 어떨까?
- 일반적인 채점 시스템은 시험 참가자의 코드 결과가 정해진 결과와 같은지 확인합니다.
- 코딩 테스트에서 탐욕 알고리즘 문제가 출제되는 경우를 생각해 보자
- 일반적으로 탐욕 알고리즘 유형에서는, 탐욕 방법으로 최적의 해가 보장되는 문제가 출제 됩니다.

탐욕 알고리즘의 접근 방법
- 탐욕 알고리즘 문제를 해결할 때는 일반적으로 다음의 과정을 거칩니다.
1) 방법 고안하기 - 현재 상황에서 어떤 것을 선택할지 알고리즘을 고안합니다.
2) 정당성 확인하기 - 자신이 고안한 알고리즘이 항상 최적의 해를 보장하는지 확인합니다. (증명 단계)

탐욕 알고리즘 예시
거스름 돈 문제는 전형적인 탐욕 알고리즘의 예시입니다.
- 카운터에 500원, 100원, 50원, 10원짜리 동전이 무수히 많이 존재합니다.
- 손님에게 6,480원을 거슬러 주어야 할 때, 동전 개수의 최솟값은?

이 문제의 해결방법은, 가장 큰 화폐 단위부터 거슬러주는 것 입니다.
따라서, 다음의 4단계를 거쳐 정답을 도출할 수 있습니다.
1) 500원으로 거슬러 줄 수 있는 만큼 거슬러 준다.
2) 100원으로 거슬러 줄 수 있는 만큼 거슬러 준다.
3) 50원으로 거슬러 줄 수 있는 만큼 거슬러 준다.
4) 10원으로 거슬러 줄 수 있는 만큼 거슬러 준다.

거스름 돈 문제의 해법 정당성 분석
- 단순히 큰 화폐 단위부터 선택하여 최적의 해를 찾을 수 있는 이유는 무엇일까?
- 그 이유는, 각 화폐 단위가 배수 관계에 속하기 때문입니다.

[예시] 120원을 거슬러 주어야 할 때, 80원, 60원, 10월 동전이 있다면?
- 최적의 해: 60원 * 2  = 120원으로, 2개의 동전이 필요합니다.
- 80원부터 거슬러 준다면, 총 5개의 동전이 필요할 것입니다.