코딩 테스트 공부하면서 기록하기위한 게시글입니다.

코딩 테스트에서 출제 빈도가 매우 높습니다.

큐(queue) 자료구조 란?

- 큐(queue)는 먼저 삽입된 데이터가 먼저 추출되는 자료구조(data structure)입니다.

ex) 게임 대기 큐는 먼저 대기한 사람이 먼저 게임에 매칭됩니다.

큐에 여러개의 데이터를 삽입하고 삭제하는 예시를 보겠습니다.

전체 연산: 삽입 3 - 삽입 5 - 삭제 - 삽입 7 - 삭제 - 삽입 8 - 삭제 - 삽입 2 - 삽입 9

큐에서는 꼬리에 새로운 원소가 들어갔다가 머리에서 원소가 나오는 것이 일반적입니다.

큐는 이런방식을 사용하기 때문에 탐색 알고리즘에서 많이 사용합니다. (너비 우선 탐색, 최단 경로 알고리즘 등등...)

왜냐하면 먼저 들어간것이 먼저 사용된다는 건 많은 알고리즘에서 유용하게 사용될 수 있는 특성이기 때문입니다.

우리가 알고리즘에서 배열을 이용해 큐를 구현하는 방법은 일반적인 접근 방법이 아닙니다.
왜냐하면 시간적으로 비효율적이기 때문입니다.

그래서 실제로 큐를 구현할 때는 일반적으로 자료구조를 공부하는 입장에서 연결 리스트를 이용해 구현할 수 있습니다.

연결리스트로 큐 구현하기

- 큐를 연결 리스트로 구현하면, 삽입과 삭제에 있어서 O(1) 상수 시간 복잡도를 보장할 수 있습니다.

- 연결 리스트로 구현할 때는 머리(head)와 꼬리(tail) 두 개의 포인터를 가집니다.

- 머리(head) : 남아있는 원소 중 가장 먼저 들어 온 데이터를 가리키는 포인터

- 꼬리(tail) : 남아있는 원소 중 가장 마지막에 들어 온 데이터를 가리키는 포인터

쉽게 대기줄 or 터널과 비슷한 형식으로 큐를 이해하면 쉽습니다.

삽입할때는 꼬리(tail) 위치에 데이터를 넣습니다.

삭제할때는 머리(head) 위치에서 데이터를 꺼냅니다.

즉 아래 사진에서는 머리에 3이 먼저 들어온 데이터가 되고 8이 추가 되었기 때문에 새로운 원소 8이 꼬리에 추가된 모습입니다.

그럼 왜 배열로는 구현할 수 없다는 걸까?

큐 동작 속도: 배열 VS 연결 리스트

- 다수의 데이터를 삽입 및 삭제할 때에 대하여, 수행 시간을 측정할 수 있습니다.

- 단순히 배열 자료형을 이용할 때보다 연결 리스트를 사용할 때 수행 시간 관점에서 효율적입니다.

JavaScript
그렇다고 JavaScript에서는 연결리스트를 구현하는 것 보다 좀 더 실용적인 Dictionary 자료형을 이용하여 
큐(queue)를 구현하면 간단합니다!!!!!
