코딩 테스트 공부하면서 기록하기위한 게시글입니다.

스택은 기본적이면서 활요빈도 사용빈도가 매우 높은 자료구조입니다.

스택 (stack)
- 스택: 먼저 들어온 데이터가 나중에 나가는 자료구조를 말합니다.
- 흔히 박스가 쌓인 형태를 스택(stack)이라고 합니다.
- 우리가 박스를 쌓은 뒤에 꺼낼 때는, 가장 마지막에 올렸던 박스부터 꺼내야 합니다.
- 새로운 원소를 삭제할 때는 마지막 원소가 삭제됩니다.

스택에 여러 개의 데이터를 삽입하고 삭제하는 예시를 보겠습니다.
전체 연산: 삽입 3 - 삽입 5 - 삭제 - 삽입 7 - 삭제 - 삽입 8 - 삭제 - 삽입 2 - 삽입 9

포인터는 헤드! 마지막원소가 최상위 원소입니다.

스택은 여러가지 연산을 제공합니다.

자바스크립트에서 스택을 구현하는 방법 - 배열 자료형
- JS의 기본적인 배열 자료형은 두 가지 메서드를 제공합니다.
- push() : 마지막 위치에 원소 삽입 O(1)
- pop() : 마지막 위치에서 원소를 추출 O(1)

따라서 일반적으로 스택을 구현할 때는 자바스크립트의 배령(Array) 자료형을 사용합니다.

let stack = [];

// 삽입(5) - 삽입(2) - 삽입(3) - 삽입(7) - 삭제() - 삽입(1) - 삽입(4) - 삭제()
stack.push(5);
stack.push(2);
stack.push(3);
stack.push(7);
stack.pop();
stack.push(1);
stack.push(4);
stack.pop();

let reversed = stack.slice().reverse();
console.log(reversed); // 최상단 원소부터 출력 [1, 3, 2, 5]
console.log(stack); // [5, 2, 3, 1]

연결 리스트로 스택 구현하기
- 스택을 연결 리스트로 구현하면, 삽입과 삭제에 있어서 O(1)을 보장할 수 있습니다.
- 연결 리스트로 구현할 때는 머리(head)를 가리키는 하나의 개의 포인터만 가집니다.
- 머리(head) : 남아있는 원소 중 가장 마지막에 들어 온 데이터를 가리키는 포인터

따라서
삽입할때는 머리(head) 위치에 데이터를 놓습니다.
삭제할때는 머리(head) 위치에서 데이터를 꺼냅니다.