코딩 테스트 공부하면서 기록하기위한 게시글입니다.

배열(Array)
- 가장 기본적인 자료구조입니다.
- 여러 개의 변수를 담는 공간으로 이해할 수 있습니다.
- 배열은 인덱스(index)가 존재하며, 인덱스는 0부터 시작합니다.
- 특정한 인덱스에 직접적으로 접근 가능 => 수행 시간: O(1)

배열의 특징
- 컴퓨터의 메인 메모리에서 배열의 공간은 연속적으로 할당됩니다.
장점: 캐시(cache) 히트 가능성이 높으며, 조회가 빠릅니다.
단점: 배열의 크기를 미리 지정해야 하는 것이 일반적이므로, 데이터의 추가 및 삭제에 한계가 있습니다.

연결 리스트(= 링크드 리스트)(Linked List)
- 연결 리스트는 컴퓨터의 메인 메모리상에서 주소가 연속적이지 않다.
- 배열과 다르게 크기가 정해져 있지 않고, 리스트의 크기는 동적으로 변경 가능합니다.
장점: 포인터(pointer)를 통해 다음 데이터의 위치를 가리킨다는 점에서 삽입과 삭제가 간편합니다.
단점: 특정 번째의 원소를 검색할 때는 앞에서부터 원소를 찾아야 하므로, 데이터 검색 속도가 느립니다.

코딩 테스트를 위한 자바스크립트 배열
- 자바스크립트에서는 배열 기능을 제공합니다.
- 자바스크립트의 배열 자료형은 동적 배열입니다.
- 배열의 용량이 가득 차면, 자동으로 크기를 증가시킵니다.
- 내부적으로 포인터(pointer)를 사용하여, 연결 리스트의 장점도 가지고 있습니다.
- 배열(array) 혹은 스택(stack)의 기능이 필요할 때 사용할 수 있습니다.
[참고] 큐(queue)의 기능을 제공하지 못합니다.(비효율적)

[알아 둘 점]
1. 일반적인 프로그래밍 언어에서의 배열로 이해할 수 있습니다.
2. 자바스크립트의 배열은 일반 배열처럼 임의의 인덱스를 이용해 직접적인 접근이 가능합니다.
3. 자바스크립트의 배열은 동적 배열의 기능을 제공하여, 맨 뒤의 위치에 원소 추가가 가능합니다.

자바스크립트 배열 생성방법
1. 대괄호 - []
2. 배열 객체 - new Array()

자바스크립트 배열 초기화
// 원하는 값을 직접 입력하여 초기화
let arr1 = [0, 1, 2, 3, 4];
console.log(arr1); // [0, 1, 2, 3, 4]

// 하나의 값으로 초기화
let arr2 = Array.from({ length: 5 }, () => 0);
console.log(arr2); // [0, 0, 0, 0, 0]

크기가 N X M인 2차원 리스트(배열) 만들기
// 2차원 배열을 만들때는 아래와 같이 원하는 값을 직접 넣어 초기화 할 수 있습니다.
let arr1 = [
	[0, 1, 2, 3],
    [4, 5, 6, 7],
    [8, 9, 10, 11],
]

// 최신 자바스크립트 환경(ES6 이상)에서 사용할 수 있는 문법입니다.
// 한 줄로 2차원 배열 초기화 가능합니다.
// 배열의 각 원소에 크기가 5인 배열을 할당합니다.
let arr2 = Array.from(Array(4), () => new Array(5))

console.log(arr2);
[
    [ <5 empty items> ],
    [ <5 empty items> ],
    [ <5 empty items> ],
    [ <5 empty items> ],
]

// 반복문을 이용해서 2차원 배열 초기화
let arr3 = new Array(3);

for (let i = 0; i < arr3.length; i++) {
	arr3[i] = Array.from(
    	{ length: 4 },
        (undefined, j) => i * 4 + j
    )
}

console.log(arr3);
[
    [0, 1, 2, 3],
    [4, 5, 6, 7],
    [8, 9, 10, 11]
]

배열 메서드
push() - 배열의 가장 마지막에 원소를 추가할 수 있습니다.
concat() - 여러 개의 배열을 이어 붙여서 합친 결과를 반환합니다. O(N)
slice(left, right) - 특정 구간의 원소를 꺼낸 배열을 반환합니다. O(N)

let arr = [1, 2, 3, 4, 5];
let result = arr.slice(2, 4);
console.log(result); // [3, 4]

indexOf() - 특정한 값을 가지는 원소의 첫 번째 인덱스를 반환합니다, 만약 해당 원소가 없다면 -1을 반환합니다. O(N)

let arr = [7, 3, 5, 6, 6, 2, 1];
console.log(arr.indexOf(3)); // 1

연결 리스트 (Linked List)
- 연결 리스트는 각 노드가 한 줄로 연결되어 있는 자료 구조입니다.
- 각 노드는 (데이터, 포인터) 형태를 가집니다.
- 포인터 : 다음 노드의 메모리 주소를 가리키는 목적으로 사용됩니다.
- 연결성 : 각 노드의 포인터는 다음 혹은 이전 노드를 가리킵니다.

이러한 연결리스트를 이용하면 다양한 자료 구조를 구현할 수 있습니다.
ex) 스택, 큐 등
- 자바스크립트는 연결 리스트를 활용하는 자료구조를 제공합니다.
- 그래서 연결 리스트를 실제 구현해야 하는 경우는 적지만, 그 원리에 대해서 이야기 해보겠습니다.

연결 리스트(Linked List) VS 배열(Array)
- 특정 위치의 데이터를 삭제할 때, 일반적인 배열에서는 O(N)만큼의 시간이 소요됩니다.
- 하지만, 연결 리스트를 이용하면 단순히 연결만 끊어주면 됩니다.
- 따라서 삭제할 위치를 정확히 알고 있는 경우 O(1)의 시간이 소요됩니다.

연결 리스트 삽입 연산
- 삽입할 위치를 알고 있다면, 물리적인 위치를 한칸씩 옮기지 않아도 삽입할 수 있습니다.
인덱스 2의 위치에 3을 넣게 하고 싶으면 포인터가 3을 바라보게 하고 기존의 8원소를 3원소가 가리키도록 해주면 됩니다.

연결 리스트 삭제 연산
- 삭제할 위치를 알고 있다면, 물리적인 위치를 한 칸씩 옮기지 않아도 삽입할 수 있습니다. 

연결 리스트 뒤에 붙이기(append) 연산
- 마지막 노드의 다음 위치에 원소를 넣으면 끝