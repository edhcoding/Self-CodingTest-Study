버블 정렬(Bubble Sort) (쉽게: 간단하지만 비효율적인 알고리즘)

버블 정렬 특징
- 단순히 인접한 두 원소를 확인하여, 정렬이 안 되어 있다면 위치를 서로 변경합니다.
- 서로 인접한 두 원소를 비교하는 형태가 거품과 같다고 하여 붙여진 이름입니다. (한국말로 거품 정렬이라고도 한다고 합니다!)
- 시간 복잡도 O(N^2)로 비효율적인 정렬 알고리즘 중 하나입니다.

버블 정렬 동작방식
- 각 단계에서는 인접한 두 개의 원소를 비교하여, 필요시 위치를 변경합니다.
- 첫째와 둘째를 비교, 둘째와 셋째를 비교, 셋째와 넷째를 비교하는 방식입니다.
핵심은 각 단계를 거칠 때마다 가장 큰 값을 하나씩 확실하게 결정하는 것으로 이해하시면 됩니다!

버블 정렬 소스 코드 예시
// 버블 정렬 함수
function bubbleSort(arr) {
    for (let i = arr.length - 1; i > 0; i--) {
        for (let j = 0; j < i; j++) {
            if (arr[j] > arr[j + 1]) {
                let temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
    return arr;
}

// 테스트
const array = [64, 34, 25, 12, 22, 11, 90];
console.log("정렬 전:", array); // [64, 34, 25, 12, 22, 11, 90]
console.log("정렬 후:", bubbleSort(array)); // [11, 12, 22, 25, 34, 64, 90]

시간 측정 예시
/* 1) 버블 정렬의 수행 시간 측정 */
// 0부터 999까지의 정수 30000개를 담은 배열 생성
let arr = Array.from({ length: 30000 }, () => Math.floor(Math.random() * 1000));

// getTime(): 1970-01-01부터의 시간차를 ms 단위로 계산
let startTime = new Date().getTime();
bubbleSort(arr);
let endTime = new Date().getTime();

// 시간차 출력
console.log("버블 정렬 소요 시간:", endTime - startTime, "ms.");

/* 2) 이미 정렬된 배열에 대한 버블 정렬의 수행 시간 측정 */
// 같이 7인 정수 30000개를 담은 배열 생성
arr = Array.from({ length: 30000 }, () => 7);

// getTime(): 1970-01-01부터의 시간차를 ms 단위로 계산
startTime = new Date().getTime();
bubbleSort(arr);
endTime = new Date().getTime();

// 시간차 출력
console.log("정렬된 배열에 대한 버블 정렬 소요 시간:", endTime - startTime, "ms.");

// 결론
// 버블 정렬 소요 시간: 2912ms
// 정렬된 배열에 대한 버블 정렬 소요 시간: 2402ms

버블 정렬 정리
- 최악의 경우에 시간 복잡도 O(N^2)을 보장합니다!
- 이미 정렬된 배열에 대해서 모든 비교가 필요하므로, 굉장히 비효율적인 정렬 알고리즘 중 하나에 속합니다.